@using watchtower.Services
@using watchtower.Code.Challenge
@using watchtower.Models
@using watchtower.Models.Events

@inject IChallengeEventBroadcastService _ChallengeEvents
@inject IChallengeManager _Challenges

@implements IDisposable 

<style>
    #sr-challenge-parent.slide-in {
        animation: active-slide-down 1s forwards;
        z-index: -10;
    }

    #sr-challenge-parent.slide-out {
        animation: active-slide-up 1s forwards;
        z-index: -10;
    }

    @@keyframes active-slide-down {
        0%      { top: -48px; }
        100%    { top: 48px; }
    }

    @@keyframes active-slide-up {
        0%      { top: 48px; }
        100%    { top: -48px; }
    }
</style>

@if (_ActiveChallenges.Count > 0) {
    <div id="sr-challenge-parent" class="@GetCssClass()" style="width: fit-content;">
        <div class="sr-h1 mb-n2">
            Challenges:
        </div>

        <table class="table table-sm sr-color mb-0" style="text-align: left; line-height: 1.2">
            @foreach (IndexedChallenge chall in _ActiveChallenges) {
                <tr>
                    <td>
                        <b>
                            @chall.Challenge.Name
                        </b>
                    </td>

                    <td>
                        @chall.Challenge.Description
                    </td>

                    @if (chall.Challenge.DurationType == ChallengeDurationType.KILLS) {
                        <td>
                            @chall.KillCount
                            /
                            @chall.Challenge.Duration
                        </td>
                    } else if (chall.Challenge.DurationType == ChallengeDurationType.TIMED) {
                        <td>
                            <Timer Seconds="(int)Math.Round(chall.TickCount / 10000000D)">
                            </Timer>
                            /
                            <Timer Seconds="chall.Challenge.Duration"></Timer>
                        </td>
                    } else {
                        <td>
                            Unknown type
                        </td>
                    }
                </tr>
            }
        </table>
    </div>
}

@code {        

    private List<IndexedChallenge> _ActiveChallenges = new List<IndexedChallenge>();

    private bool _IsChanging = false;

    protected override void OnInitialized() {
        base.OnInitialized();

        _ChallengeEvents.OnChallengeStart += OnChallengeStart;
        _ChallengeEvents.OnChallengeEnded += OnChallengeEnded;
        _ChallengeEvents.OnChallengeUpdate += OnChallengeUpdate;

        List<IndexedChallenge> active = _Challenges.GetRunning();
        foreach (IndexedChallenge c in active) {
            _ActiveChallenges.Add(c);
        }
    }

    private void OnChallengeStart(object? sender, Ps2EventArgs<IndexedChallenge> args) {
        _IsChanging = false; // Prevent the delayed hide
        _ActiveChallenges.Add(args.Payload);

        InvokeAsync(() => {
            StateHasChanged();
        });
    }

    private void OnChallengeEnded(object? sender, Ps2EventArgs<IndexedChallenge> args) {
        _ActiveChallenges = _ActiveChallenges.Where(iter => iter.Index != args.Payload.Index).ToList();
        InvokeAsync(() => {
            StateHasChanged();
        });

        if (_ActiveChallenges.Count == 0) {
            _IsChanging = true;

            InvokeAsync(async () => {
                await Task.Delay(1000);
                if (_IsChanging == true) {
                    StateHasChanged();
                }
            });
        }
    }

    private void OnChallengeUpdate(object? sernder, Ps2EventArgs<IndexedChallenge> args) {
        foreach (IndexedChallenge challenge in _ActiveChallenges) {
            if (challenge.Index == args.Payload.Index) {
                challenge.KillCount = args.Payload.KillCount;
                challenge.TickCount = args.Payload.TickCount;
            }
        }

        InvokeAsync(() => {
            StateHasChanged();
        });
    }

    public void Dispose() {
        _ChallengeEvents.OnChallengeStart -= OnChallengeStart;
        _ChallengeEvents.OnChallengeEnded -= OnChallengeEnded;
        _ChallengeEvents.OnChallengeUpdate -= OnChallengeUpdate;
    }

    private string GetCssClass() {
        return $"px-2 py-1 sr-border sr-vertical-center sr-background sr-color {(_IsChanging == false ? "slide-in" : "slide-out")}";
    }

}

