@using watchtower.Models
@using watchtower.Models.Events
@using watchtower.Services

@inject IMatchEventBroadcastService _MatchEvents
@inject IMatchManager _Match
@inject IChallengeEventBroadcastService _ChallengeEvents

@implements IDisposable

<!--
<img src="/font/example.png" style="position:absolute; z-index: -10;" />
-->

<div class="sr-vertical-center">
    <!--
    <span>
        @if (_player1 != null && _player1.Streak > 0) {
            <span class="overlay-streak overlay-streak-left">
                @_player1.Streak
            </span>
        } 
    </span>
    -->

    <div class="overlay-border-wrap">
        <div class="overlay-parent">
            <span class="overlay-name overlay-name-left">
                @if (_player1 != null) {
                    @_player1.RunnerName
                }
            </span>

            <span class="overlay-score overlay-score-left">
                @if (_player1 != null) {
                    @_player1.Score
                }
            </span>

            <span style="width: 100px; text-align: center; font-family: ps2-mono; display: inline-block;">
                <Timer Seconds="_MatchLength"></Timer>
            </span>

            <span class="overlay-score overlay-score-right">
                @if (_player2 != null) {
                    @_player2.Score
                }
            </span>

            <span class="overlay-name overlay-name-right">
                @if (_player2 != null) {
                    @_player2.RunnerName
                }
            </span>
        </div>
    </div>

    <!--
    <span>
        @if (_player2 != null && _player2.Streak > 0) {
            <span class="overlay-streak overlay-streak-right">
                @_player2.Streak
            </span>
        } 
    </span>
    -->

    <div>
        <span class="overlay-wins overlay-wins-left">
            @if (_player1 != null) {
                for (int i = _RoundCount; i > 0; --i) {
                    if (i <= _player1.Wins) {
                        <span class="overlay-indicator overlay-win-win">
                        </span>
                    } else {
                        <span class="overlay-indicator overlay-win-lose">
                        </span>
                    }
                }
            }
        </span>

        <span style="width: 108px; display: inline-block">
            &nbsp;
        </span>

        <span class="overlay-wins overlay-wins-right">
            @if (_player2 != null) {
                for (int i = 0; i < _RoundCount; ++i) {
                    if (i < _player2.Wins) {
                        <span class="overlay-indicator overlay-win-win">
                        </span>
                    } else {
                        <span class="overlay-indicator overlay-win-lose">
                        </span>
                    }
                }
            }
        </span>
    </div>

    <div class="d-hidden">
        @if (_playStart == true) {
            <audio autoplay src="/sounds/start_beep.mp3"></audio>
        }

        @if (_playEnd == true) {
            <audio autoplay src="/sounds/end_beep.mp3"></audio>
        }
    </div>

</div>


<style>
    .table td {
        border-top: unset !important;
    }

    .overlay-parent {
        font-family: ps2;
        font-size: 24pt;
        color: var(--color-primary);
        background-color: var(--color-muted);
    }

    .overlay-border-wrap {
        padding: 1rem;
        position: relative;
        background: linear-gradient(90deg, rgba(255,0,152,1) 0%, rgba(255,0,152,1) 40%, rgba(102,0,255,1) 60%, rgba(102,0,255,1) 100%);
        padding: 3px;
        display: inline-block;
    }

    .overlay-name {
        display: inline-block;
        overflow: hidden;
        text-overflow: ellipsis;
        vertical-align: top;
        width: 200px;
    }

    .overlay-name-left {
        text-align: start;
        padding-left: 0.5rem;
    }

    .overlay-name-right {
        text-align: end;
        padding-right: 0.5rem;
    }

    .overlay-score {
        display: inline-block;
        width: 70px;
        padding: 0 0.5rem;
    }

    .overlay-score-left {
        border-right: 3px var(--color-primary) solid;
        text-align: end;
    }

    .overlay-score-right {
        border-left: 3px var(--color-secondary) solid;
        text-align: start;
    }

    .overlay-wins {
        display: inline-block;
        padding: 0 0.5rem;
    }

    .overlay-wins-left {
        text-align: end;
    }

    .overlay-wins-right {
        text-align: start;
    }

    .overlay-indicator {
        border-radius: 12px;
        display: inline-block;
        height: 1rem;
        width: 1rem;
        margin-top: 0.25rem;
    }

    .overlay-win-win {
        border: 8px var(--color-primary) solid;
    }

    .overlay-win-lose {
        border: 8px var(--color-muted) solid;
    }

    .overlay-streak {
        display: inline-block;
        padding: 0 0.5rem;
        font-family: ps2-mono;
        font-size: 24pt;
        color: var(--color-primary);
        background-color: var(--color-muted);
        margin-top: 0.25rem;
        border: 3px;
        border-style: solid;
        border-radius: 30px;
        line-height: 1.2;
    }

    .overlay-streak-left {
        text-align: end;
        border-color: var(--color-primary);
    }

    .overlay-streak-right {
        text-align: right;
        border-color: var(--color-secondary);
    }

</style>

@code {

    private TrackedPlayer? _player1 = null;
    private TrackedPlayer? _player2 = null;

    private int _MatchLength;
    private MatchSettings _MatchSettings = default!;

    public int _RoundCount = 0;

    private bool _playStart = false;
    private bool _playEnd = false;

    protected override void OnInitialized() {
        base.OnInitialized();

        _MatchEvents.OnPlayerUpdateEvent += PlayerUpdateHandler;
        _MatchEvents.OnTimerEvent += OnTimerUpdate;
        _MatchEvents.OnMatchSettingsEvent += OnSettingsUpdate;

        _ChallengeEvents.OnPollStarted += OnPollStarted;
        _ChallengeEvents.OnPollEnded += OnPollEnded;

        _player1 = _Match.GetPlayer(0);
        _player2 = _Match.GetPlayer(1);

        _MatchSettings = _Match.GetSettings();

        UpdateWinCount();
    }

    public void Dispose() {
        _MatchEvents.OnPlayerUpdateEvent -= PlayerUpdateHandler;
        _MatchEvents.OnTimerEvent -= OnTimerUpdate;
        _MatchEvents.OnMatchSettingsEvent -= OnSettingsUpdate;

        _ChallengeEvents.OnPollStarted -= OnPollStarted;
        _ChallengeEvents.OnPollEnded -= OnPollEnded;
    }

    private void PlayerUpdateHandler(object? sender, Ps2EventArgs<TrackedPlayer?> args) {
        TrackedPlayer? player = args.Payload;

        if (player != null) {
            if (player.Index == 0) {
                _player1 = player;
            } else if (player.Index == 1) {
                _player2 = player;
            }
        }

        UpdateWinCount();

        InvokeAsync(() => {
            StateHasChanged();
        });
    }

    private void OnPollStarted(object? sender, Ps2EventArgs<ChallengePollResults> args) {
        _playStart = true;

        InvokeAsync(async () => {
            StateHasChanged();

            await Task.Delay(5000);
            _playStart = false;
            StateHasChanged();
        });
    }

    private void OnPollEnded(object? sender, Ps2EventArgs<ChallengePollResults> args) {
        _playEnd = true;

        InvokeAsync(async () => {
            StateHasChanged();

            await Task.Delay(5000);
            _playEnd = false;
            StateHasChanged();
        });
    }

    private void OnTimerUpdate(object? sender, Ps2EventArgs<int> args) {
        _MatchLength = args.Payload;

        /*
        if (_player1 != null) {
            _p1KPM = (double) _player1.ValidKills.Count / Math.Max(1D, (double) _MatchLength) * 60D;
            if (_player1.Score == 0) {
                _p1Left = 0;
            } else {
                int killsLeft = _MatchSettings.KillGoal - _player1.Score;
                double left = Math.Round((double) killsLeft / (_p1KPM / 60));
                _p1Left = (int) left;
            }
        }

        if (_player2 != null) {
            _p2KPM = (double) _player2.ValidKills.Count / Math.Max(1D, (double) _MatchLength) * 60D;
            if (_player2.Score == 0) {
                _p2Left = 0;
            } else {
                int killsLeft = _MatchSettings.KillGoal - _player2.Score;
                double left = Math.Round((double) killsLeft / (_p2KPM / 60));
                _p2Left = (int) left;
            }
        }
        */

        InvokeAsync(() => {
            StateHasChanged();
        });
    }

    private void OnSettingsUpdate(object? sender, Ps2EventArgs<MatchSettings> args) {
        _MatchSettings = args.Payload;
    }

    private void UpdateWinCount() {
        _RoundCount = (_player1?.Wins ?? 0) + (_player2?.Wins ?? 0);
    }

}