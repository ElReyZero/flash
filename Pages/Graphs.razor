@page "/graphs"

@using watchtower.Models.Events; 
@using Plotly.Blazor.LayoutLib 
@using Microsoft.Extensions.Logging
@using watchtower.Pages.Components

@inject IMatchManager _Match 
@inject ILogger<Graphs> _Logger 

<div class="container-fluid">
    <div class="row h-100" style="font-family: ps2; color: #e8b55c;">
        <div class="col-3">
            @if (_player1 != null) {
                <GraphPlayer Player="_player1"></GraphPlayer>
            } else {
                <div>
                    Runner 1 not set
                </div>
            }
        </div>

        <div class="col-6 px-0">
            <div style="text-align: center; font-size: 24pt;">
                <Timer Seconds="_MatchLength"></Timer>
            </div>

            <PlotlyChart style="width: 100%; height: 500px;" @bind-Config="_config" @bind-Layout="_layout" @bind-Data="_data" @ref="chart"></PlotlyChart>
        </div>

        <div class="col-3">
            @if (_player2 != null) {
                <GraphPlayer Player="_player2"></GraphPlayer>
            } else {
                <div>
                    Runner 2 not set
                </div>
            }
        </div>
    </div>
</div>

@code {

    private PlotlyChart chart = default!;
    private Config _config = new Config() {
        Responsive = true
    };

    private Layout _layout = new Layout();
    private IList<ITrace> _data = new List<ITrace>();

    private int _MatchLength = 0;
    private MatchSettings _MatchSettings = default!;

    private TrackedPlayer? _player1 = null;
    private TrackedPlayer? _player2 = null;

    private List<string> _DefaultColors = new List<string>() {
        "#1f77b4",
        "#ff7f0e",
        "#2ca02c",
        "#d62728",
        "#9467bd",
        "#8c564b",
        "#e377c2",
        "#f7f7f7",
        "#bcbd22",
        "#17becf"
    };

    protected override void OnInitialized() {
        base.OnInitialized();

        _MatchLength = _Match.GetMatchLength();
        _MatchSettings = _Match.GetSettings();

        SetupChartData();
        SetupPlayerData();
    }

    private void SetupPlayerData() {
        _player1 = _Match.GetPlayer(0);
        _player2 = _Match.GetPlayer(1);
    }

    private void SetupChartData() {
        int length = _Match.GetMatchLength();
        _Logger.LogInformation($"Match length: {length}");

        _layout = new Layout() {
            Title = new Title() {
                Text = "Kills",
                Font = new Plotly.Blazor.LayoutLib.TitleLib.Font() {
                    Color = "#e8b55c",
                    Family = "ps2",
                    Size = 24
                }
            },
            YAxis = new List<YAxis>() {
                new YAxis() {
                    Title = new Plotly.Blazor.LayoutLib.YAxisLib.Title() { Text = "Kills" },
                    LineWidth = 5,
                    Color = "#e8b55c",
                    Range = new List<object>() { 0, _MatchSettings.KillGoal }
                }
            },
            XAxis = new List<XAxis>() {
                new XAxis() {
                    Title = new Plotly.Blazor.LayoutLib.XAxisLib.Title() { Text = "Time" },
                    TickMode = Plotly.Blazor.LayoutLib.XAxisLib.TickModeEnum.Array,
                    Tick0 = 0,
                    LineWidth = 5,
                    Color = "#e8b55c",
                    GridColor = "#cb9e51"
                }
            },
            PlotBgColor = "#00373737",
            PaperBgColor = "#00373737",
            Legend = new Legend() {
                Font = new Plotly.Blazor.LayoutLib.LegendLib.Font() {
                    Family = "ps2",
                    Color = "#e8b55c",
                    Size = 24
                },
                X = 0m,
                Y = 1m
            }
        };

        _layout.XAxis[0].TickVals = new List<object>();
        _layout.XAxis[0].TickText = new List<object>();
        for (int i = 0; i < length; i += 60) {
            _layout.XAxis[0].TickVals.Add(Math.Floor(i / 60D));
            _layout.XAxis[0].TickText.Add($"{Math.Floor(i / 60D)}:00");
            _Logger.LogTrace($"Adding tick at {i}");
        }

        _layout.XAxis[0].TickVals.Add((double) length / 60D);
        _layout.XAxis[0].TickText.Add(String.Format("{0,2:D2}:{1,2:D2}", (int) Math.Floor(_MatchLength / 60D), _MatchLength % 60));

        _Logger.LogDebug($"XAxis:\n\tText: {String.Join(", ", _layout.XAxis[0].TickText)}\n\tVals: {String.Join(", ", _layout.XAxis[0].TickVals)}");

        List<Scatter> sets = new List<Scatter>();

        TimeSpan matchStart = new TimeSpan(_Match.GetMatchStart().Ticks);

        foreach (TrackedPlayer player in _Match.GetPlayers()) {
            _Logger.LogDebug($"{player.RunnerName} has {player.Kills.Count} kills");
            Scatter set = new Scatter();
            set.Name = player.RunnerName;
            set.Mode = ModeFlag.Lines | ModeFlag.Markers;
            set.XAxis = "x1";
            set.Line = new Line() {
                Width = 5,
                Color = _DefaultColors[player.Index % _DefaultColors.Count]
            };

            List<object> X = new List<object>();
            List<object> Y = new List<object>();

            int index = 0;

            X.Add(0);
            Y.Add(0);

            foreach (KillEvent ev in player.ValidKills) {
                TimeSpan span = new TimeSpan(ev.Timestamp.Ticks);
                double pos = ((double) ((span - matchStart).TotalSeconds)) / 60D;
                X.Add(pos);
                Y.Add(++index);
            }

            // Add value at the end, useful if the match is currently running
            X.Add(_MatchLength / 60D);
            Y.Add(index);

            set.X = new List<object>(X);
            set.Y = new List<object>(Y);

            sets.Add(set);

            Scatter est = new Scatter();
            est.Name = $"{player.RunnerName} pace";
            est.Mode = ModeFlag.Lines;
            est.XAxis = "x1";
            est.Line = new Line() {
                Width = 4,
                Dash = "dot",
                Color = _DefaultColors[player.Index % _DefaultColors.Count]
            };

            double kpm = ((double) player.Score / Math.Max(1d, (double) _MatchLength)) * 60D;
            double pace = ((kpm == 0) ? (60) : (_MatchSettings.KillGoal / kpm));

            est.X = new List<object>() {
                0, pace
            };
            est.Y = new List<object>() {
                0, _MatchSettings.KillGoal
            };

            int m = (int)Math.Floor(pace);
            int s = ((int)(pace * 60D)) % 60;

            _Logger.LogDebug($"Player {player.Index}/{player.RunnerName} kpm: {kpm}, pace: {pace}\n\tX: {String.Join(", ", est.X)}\n\tY: {String.Join(", ", est.Y)}\n\t{m}:{s}");

            _layout.XAxis[0].TickVals.Add(pace);
            _layout.XAxis[0].TickText.Add(String.Format("{0,2:D2}:{1,2:D2}", m, s));

            sets.Add(est);
        }

        _data = new List<ITrace>(sets);

        InvokeAsync(async () => {
            await chart!.React();
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender == true) {
            await chart!.React();
        }
    }

}