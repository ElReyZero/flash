@using watchtower.Code.Constants
@using watchtower.Services
@using watchtower.Models.Events

<div>
    <h2>Runner @(Index + 1)</h2>

    @if (_MatchState != MatchState.STARTED) {
        <h4 class="text-danger">Match is not started, cannot setup runners</h4>
    }

    <EditForm Model="@_charName" OnValidSubmit="AddCharacter">
        <div class="input-group">
            <span class="input-group-prepend input-group-text">
                Character
            </span>

            <input type="text" class="form-control" @bind-value="_charName" disabled="@(_loading == true)" />

            <div class="input-group-append">
                <button type="submit" class="btn btn-success" disabled="@(_MatchState != MatchState.STARTED)">
                    Add
                </button>
            </div>
        </div>
    </EditForm>

    <EditForm Model="@_teamName" OnValidSubmit="SetName">
        <div class="input-group">
            <span class="input-group-prepend input-group-text">
                Name
            </span>

            <input type="text" class="form-control" @bind-value="_teamName" />

            <div class="input-group-append">
                <button type="submit" class="btn btn-primary" disabled="@(_MatchState != MatchState.STARTED)">
                    Update
                </button>
            </div>
        </div>
    </EditForm>

    <hr />

    @if (_player != null) {
        <div class="mb-3">
            <b>Name:</b> @_player.RunnerName
        </div>

        <div>
            <b>Characters:</b>
        </div>

        <table class="table table-sm">
            <tr class="table-secondary">
                <th>Character name</th>
                <th>Faction</th>
                <td></td>
            </tr>

            @foreach (Character ch in _player.Characters) {
                <tr>
                    <td>
                        @if (ch.OutfitName != null) {
                            <span>
                                [@ch.OutfitTag]
                            </span>
                        }
                        @ch.Name
                    </td>
                    <td>
                        <Faction FactionID="@ch.FactionID"></Faction>
                    </td>

                    <td @onclick="() => _Match.RemoveCharacter(Index, ch.Name)">
                        &times;
                    </td>
                </tr>
            }
        </table>

        <div>
            <b>Score controls</b>
        </div>

        <div class="btn-group w-100">
            <button class="btn btn-success" type="button" @onclick="AddScore">
                +1 Score
            </button>

            <button class="btn btn-danger" type="button" @onclick="RemoveScore">
                -1 Score
            </button>
        </div>
    } else {
        <div>
            No characters loaded
        </div>
    }
</div>

@inject IMatchManager _Match  
@inject IAdminMessageBroadcastService _AdminMessages
@inject IMatchEventBroadcastService _MatchEvents

@code {

    [Parameter]
    public int Index { get; set; }

    private TrackedPlayer? _player;

    private MatchState _MatchState;

    private string _charName = "";
    private string _teamName = "";

    private bool _loading = false;

    protected override void OnInitialized() {
        base.OnInitialized();

        _player = _Match.GetPlayer(Index);
        _MatchState = _Match.GetMatchState();

        _MatchEvents.OnMatchStateEvent += OnMatchStateEvent;
    }

    private async Task AddCharacter() {
        _loading = true;
        if (await _Match.AddCharacter(Index, _charName) == true) {
            _player = _Match.GetPlayer(Index);
        }
        _loading = false;

        _charName = "";
    }

    private void SetName() {
        _Match.SetRunnerName(Index, _teamName);
    }

    private void AddScore() {
        if (_player == null) {
            return;
        }

        KillEvent ev = new KillEvent();
        ev.Timestamp = DateTime.UtcNow;

        ScoreEvent scoreEvent = new ScoreEvent();
        scoreEvent.ScoreChange = 1;
        scoreEvent.Timestamp = DateTime.UtcNow;
        scoreEvent.TotalScore = _player.Score + 1;

        _player.ValidKills.Add(ev);
        _player.Scores.Add(scoreEvent);

        _Match.IncrementScore(Index);

        _AdminMessages.Log($"Manually added score to {Index}:{_player.RunnerName}, score is {_player.Score}");
    }

    private void RemoveScore() {
        if (_player == null) {
            return;
        }

        _Match.SetScore(Index, _player.Score - 1);
        _AdminMessages.Log($"Manually removed score from {Index}:{_player.RunnerName}, score is {_player.Score}");
    }

    private void OnMatchStateEvent(object? sender, Ps2EventArgs<MatchState> args) {
        _MatchState = args.Payload;
        InvokeAsync(() => {
            StateHasChanged();
        });
    }

}
