@using watchtower.Code.Constants
@using watchtower.Services
@using watchtower.Models.Events

<div>
    <h4>Match controls</h4>

    <table class="table align-middle">
        <tr>
            <td>
                <button type="button" class="btn btn-primary" disabled="@(_MatchState != MatchState.UNSTARTED)" @onclick="() => _Match.StartMatch()">Start match</button>
            </td>

            <td>Start the match, setting up the Discord stuff</td>
        </tr>

        <tr>
            <td>
                <button type="button" class="btn btn-danger" disabled="@(_MatchState != MatchState.STARTED)" @onclick="() => _Match.EndMatch()">End match</button>
            </td>

            <td>End the match, disconnecting the Discord bot</td>
        </tr>

        <tr>
            <td>
                <button type="button" class="btn btn-warning" @onclick="() => _Match.ClearMatch()">Reset match</button>
            </td>

            <td>Reset the match, clearing everything</td>
        </tr>
    </table>

    <hr />

    <h4>Round controls</h4>

    <table class="table">
        @if (_MatchState != MatchState.STARTED) {
            <tr class="table-danger">
                <td colspan="2">Match is not started, cannot control rounds</td>
            </tr>
        }

        <tr>
            <td>
                <button type="button" class="btn btn-success" disabled="@(_MatchState != MatchState.STARTED)" @onclick="() => _Match.StartRound()">Start round</button>
            </td>

            <td>Start the round and timer</td>
        </tr>

        <tr>
            <td>
                <button type="button" class="btn btn-primary" disabled="@(_MatchState != MatchState.STARTED)" @onclick="() => _Match.RestartRound()">New round</button>
            </td>

            <td>Setup the new round, reseting the timer, kills, etc. Press start round to actually start it</td>
        </tr>

        <tr>
            <td>
                <button type="button" class="btn btn-warning" disabled="@(_MatchState != MatchState.STARTED)" @onclick="() => _Match.RestartRound()">Restart round</button>
            </td>

            <td>Restart the round, resetting the score</td>
        </tr>

        <tr>
            <td>
                <button type="button" class="btn btn-success" disabled="@(_MatchState != MatchState.STARTED)" @onclick="() => _Match.PauseRound()">Pause round</button>
            </td>

            <td>Pause the round</td>
        </tr>
    </table>
</div>

@inject MatchManager _Match  
@inject IMatchEventBroadcastService _MatchEvents

@code {

    private MatchState _MatchState;

    protected override void OnInitialized() {
        base.OnInitialized();

        _MatchState = _Match.GetMatchState();

        _MatchEvents.OnMatchStateEvent += OnMatchStateEvent;
    }

    private void OnMatchStateEvent(object? sender, Ps2EventArgs<MatchState> args) {
        _MatchState = args.Payload;
        InvokeAsync(() => {
            StateHasChanged();
        });
    }

}
