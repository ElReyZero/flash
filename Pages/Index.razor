@page "/"

@using watchtower.Services;
@using watchtower.Models;
@using watchtower.Models.Events;
@using watchtower.Constants;
@using watchtower.Pages.Components; 

@inject IMatchManager _Match; 
@inject IEventBroadcastService _Events;

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1>Runner setup</h1>
        </div>
    </div>

    <div class="row">
        <div class="col-3">
            <h2>Runner 1</h2>

            <EditForm Model="@_inputPlayer1" OnValidSubmit="AddToRunner1">
                <div class="input-group">
                    <span class="input-group-prepend input-group-text">
                        Character
                    </span>

                    <input type="text" class="form-control" @bind-value="_inputPlayer1" disabled="@(_loading1 == true)" />

                    <div class="input-group-append">
                        <button type="submit" class="btn btn-success">
                            Add
                        </button>
                    </div>
                </div>
            </EditForm>

            <EditForm Model="@_inputName1" OnValidSubmit="SetRunnerName1">
                <div class="input-group">
                    <span class="input-group-prepend input-group-text">
                        Name
                    </span>

                    <input type="text" class="form-control" @bind-value="_inputName1" />

                    <div class="input-group-append">
                        <button type="submit" class="btn btn-primary">
                            Update
                        </button>
                    </div>
                </div>
            </EditForm>

            <hr />

            @if (_player1 != null) {
                <RunnerSetup Player="@_player1"></RunnerSetup>
            }
        </div>

        <div class="col-3">
            <h2>Runner 2</h2>

            <EditForm Model="@_inputPlayer2" OnValidSubmit="AddToRunner2">
                <div class="input-group">
                    <span class="input-group-prepend input-group-text">
                        Character
                    </span>

                    <input type="text" class="form-control" @bind-value="_inputPlayer2" disabled="@(_loading2 == true)" />

                    <div class="input-group-append">
                        <button type="submit" class="btn btn-success">
                            Add
                        </button>
                    </div>
                </div>
            </EditForm>

            <EditForm Model="@_inputName2" OnValidSubmit="SetRunnerName2">
                <div class="input-group">
                    <span class="input-group-prepend input-group-text">
                        Name
                    </span>

                    <input type="text" class="form-control" @bind-value="_inputName2" />

                    <div class="input-group-append">
                        <button type="submit" class="btn btn-primary">
                            Update
                        </button>
                    </div>
                </div>
            </EditForm>

            <hr />

            @if (_player2 != null) {
                <RunnerSetup Player="@_player2"></RunnerSetup>
            }
        </div>

        <div class="col-3">
            <h2>Match settings</h2>

            <div class="mb-4">
                Kill goal: 

                <EditForm Model="@_killGoal" OnValidSubmit="SetKillGoal">
                    <div class="input-group">
                        <input type="text" class="form-control" @bind-value="_killGoal" />

                        <div class="input-group-append">
                            <button type="submit" class="btn btn-primary">
                                Update
                            </button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>

        <div class="col-3">
            <h2>Match controls</h2>

            <div class="mb-4">
                Current state: @_MatchState
            </div>

            <button type="button" class="btn btn-primary d-block" @onclick="() => _Match.StartRound()">Start round</button>
            <p>Start the round and timer</p>

            <button type="button" class="btn btn-primary d-block" @onclick="() => _Match.RestartRound()">Setup new round</button>
            <p>Setup a new round, resetting the timer, kills, etc. Press start round to actually start it</p>

            <button type="button" class="btn btn-danger d-block" @onclick="() => _Match.ClearMatch()">Reset match</button>
            <p>Reset the match, clearing everything</p>

            <button type="button" class="btn btn-warning d-block" @onclick="() => _Match.RestartRound()">Restart round</button>
            <p>Restart the round, resetting the scores</p>

            <button type="button" class="btn btn-success d-block" @onclick="() => _Match.PauseRound()">Pause round</button>
            <p>Pause the round, not counting kills for a bit. This will mess with KPM</p>

            <h4 class="my-2">Other pages:</h4>

            <div>
                <a href="/overlay" target="_blank">Overlay</a>
            </div>

            <div>
                <a href="/graphs" target="_blank">Graph</a>
            </div>

        </div>
    </div>
</div>

@code {

    private string _inputPlayer1 = "";
    private string _inputName1 = "";
    private bool _loading1 = false;
    private TrackedPlayer? _player1;

    private string _inputPlayer2 = "";
    private string _inputName2 = "";
    private bool _loading2 = false;
    private TrackedPlayer? _player2;

    private MatchState _MatchState = MatchState.UNSTARTED;

    private MatchSettings _MatchSettings = new MatchSettings();

    private string _killGoal = "";

    protected override void OnInitialized() {
        base.OnInitialized();

        _MatchState = _Match.GetState();
        _MatchSettings = _Match.GetSettings();

        _killGoal = _MatchSettings.KillGoal.ToString();

        _Events.OnMatchStateEvent += OnMatchStateEvent;
        _Events.OnMatchSettingsEvent += OnMatchSettingsEvent;

        _player1 = _Match.GetPlayer(0);
        _player2 = _Match.GetPlayer(1);
    }

    private async Task AddToRunner1() {
        _loading1 = true;
        bool res = await _Match.AddCharacter(0, _inputPlayer1);
        _player1 = _Match.GetPlayer(0);
        _loading1 = false;

        _inputPlayer1 = "";
    }

    private void SetRunnerName1() {
        _Match.SetRunnerName(0, _inputName1);
    }

    private async Task AddToRunner2() {
        _loading2 = true;
        bool res = await _Match.AddCharacter(1, _inputPlayer2);
        _player2 = _Match.GetPlayer(1);
        _loading2 = false;

        _inputPlayer2 = "";
    }

    private void SetRunnerName2() {
        _Match.SetRunnerName(1, _inputName2);
    }

    private void SetKillGoal() {
        bool valid = Int32.TryParse(_killGoal, out int killGoal);

        if (valid) {
            _MatchSettings.KillGoal = killGoal;

            _Match.SetSettings(_MatchSettings);
        }
    }

    private void OnMatchStateEvent(object? sender, Ps2EventArgs<MatchState> args) {
        _MatchState = args.Payload;
    }

    private void OnMatchSettingsEvent(object? sender, Ps2EventArgs<MatchSettings> args) {
        _MatchSettings = args.Payload;
    }

}
